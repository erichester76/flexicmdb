import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
render() {
return (

<nextscript> ); } } <p>export default MyDocument; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/pages/index.tsx import { useSession } from "next-auth/react"; import { useRouter } from "next/router"; import Link from "next/link";</p> <p>export default function Home() { const { data: session, status } = useSession(); const router = useRouter();</p> <p>if (status === "loading") { return </p><div>Loading...</div>; }<p></p> <p>if (!session) { router.push("/api/auth/signin"); return null; }</p> <p>return (</p> <div class="container mx-auto p-4"> <h1 class="text-3xl font-bold mb-4">FlexiCMDB Dashboard</h1> <nav class="space-y-2"> <link href="/entities"> <a class="block text-blue-500 hover:underline">Manage Entities (CMDB)</a> <link href="/ipam"> <a class="block text-blue-500 hover:underline">IP Address Management (DDI)</a> <link href="/itil/incidents"> <a class="block text-blue-500 hover:underline">Incidents (ITIL)</a> <link href="/itil/changes"> <a class="block text-blue-500 hover:underline">Changes (ITIL)</a> <link href="/users"> <a class="block text-blue-500 hover:underline">Users &#x26; CCBs</a> </nav> </div> ); } EOF <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/pages/entities/index.tsx import { GetServerSideProps } from "next"; import { useSession } from "next-auth/react"; import { useState } from "react"; import Link from "next/link"; import { Entity } from "../../lib/types";</p> <p>interface EntitiesPageProps { entities: Entity[]; }</p> <p>export default function EntitiesPage({ entities }: EntitiesPageProps) { const { data: session } = useSession(); const [filterType, setFilterType] = useState("");</p> <p>const filteredEntities = filterType ? entities.filter((entity) => entity.type === filterType) : entities;</p> <p>if (!session) { return </p><div>Please sign in to view entities.</div>; }<p></p> <p>return (</p> <div class="container mx-auto p-4"> <h1 class="text-2xl font-bold mb-4">Entities (CMDB)</h1> <div class="mb-4"> <label class="mr-2">Filter by Type:</label> <input type="text" value="{filterType}" onchange="{(e)" &#x3D;=""> setFilterType(e.target.value)} className="border p-2 rounded" /> </div> {filteredEntities.map((entity) => ( ))} <table class="w-full border-collapse"> <thead> <tr class="bg-gray-200"> <th class="border p-2">Name</th> <th class="border p-2">Type</th> <th class="border p-2">Status</th> <th class="border p-2">Actions</th> </tr> </thead> <tbody><tr key="{entity.id}"> <td class="border p-2">{entity.name}</td> <td class="border p-2">{entity.type}</td> <td class="border p-2">{entity.status}</td> <td class="border p-2"> <link href="{&#x60;/entities/${entity.id}&#x60;}"> <a class="text-blue-500 hover:underline">View</a> </td> </tr></tbody> </table> </div> ); } <p>export const getServerSideProps: GetServerSideProps = async (context) => { const res = await fetch(<code>${process.env.NEXT_PUBLIC_API_URL}/entities</code>, { headers: { Authorization: <code>Bearer ${context.req.cookies["next-auth.session-token"] || ""}</code>, }, }); const entities = await res.json();</p> <p>return { props: { entities, }, }; }; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/pages/entities/[id].tsx import { GetServerSideProps } from "next"; import { useSession } from "next-auth/react"; import { Entity } from "../../lib/types";</p> <p>interface EntityPageProps { entity: Entity; }</p> <p>export default function EntityPage({ entity }: EntityPageProps) { const { data: session } = useSession();</p> <p>if (!session) { return </p><div>Please sign in to view entity details.</div>; }<p></p> <p>if (!entity) { return </p><div>Entity not found.</div>; }<p></p> <p>return (</p> <div class="container mx-auto p-4"> <h1 class="text-2xl font-bold mb-4">Entity Details</h1> <div class="border p-4 rounded"> <p><strong>ID:</strong> {entity.id}</p> <p><strong>Name:</strong> {entity.name}</p> <p><strong>Type:</strong> {entity.type}</p> <p><strong>Status:</strong> {entity.status}</p> <p><strong>Attributes:</strong> {JSON.stringify(entity.attributes)}</p> </div> </div> ); } <p>export const getServerSideProps: GetServerSideProps = async (context) => { const { id } = context.params!; const res = await fetch(<code>${process.env.NEXT_PUBLIC_API_URL}/entities/${id}</code>, { headers: { Authorization: <code>Bearer ${context.req.cookies["next-auth.session-token"] || ""}</code>, }, }); const entity = await res.json();</p> <p>return { props: { entity: res.status === 200 ? entity : null, }, }; }; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/pages/api/entities.ts import { NextApiRequest, NextApiResponse } from "next";</p> <p>export default async function handler(req: NextApiRequest, res: NextApiResponse) { const { method } = req; const apiUrl = <code>${process.env.API_URL}/entities</code>;</p> <p>try { const headers = { Authorization: req.headers.authorization || "", "Content-Type": "application/json", };</p> <p>if (method === "GET") { const response = await fetch(apiUrl, { headers }); const data = await response.json(); res.status(response.status).json(data); } else if (method === "POST") { const response = await fetch(apiUrl, { method: "POST", headers, body: JSON.stringify(req.body), }); const data = await response.json(); res.status(response.status).json(data); } else { res.setHeader("Allow", ["GET", "POST"]); res.status(405).end(<code>Method ${method} Not Allowed</code>); } } catch (error) { res.status(500).json({ error: "Internal Server Error" }); } } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/components/Navbar.tsx import Link from "next/link"; import { useSession, signOut } from "next-auth/react";</p> <p>export default function Navbar() { const { data: session } = useSession();</p> <p>return (</p> <nav class="bg-gray-800 p-4"> <div class="container mx-auto flex justify-between items-center"> <link href="/"> <a class="text-white text-xl font-bold">FlexiCMDB</a> <div class="space-x-4"> {session ? ( &#x3C;> <link href="/entities"> <a class="text-white hover:text-gray-300">Entities</a> <button onclick="{()" &#x3D;=""> signOut()} className="text-white hover:text-gray-300" > Sign Out </button> ) : ( <link href="/api/auth/signin"> <a class="text-white hover:text-gray-300">Sign In</a> )} </div> </div> </nav> ); } EOF <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/components/EntityTable.tsx import Link from "next/link"; import { Entity } from "../lib/types";</p> <p>interface EntityTableProps { entities: Entity[]; }</p> <p>export default function EntityTable({ entities }: EntityTableProps) { return (</p> {entities.map((entity) => ( ))} <table class="w-full border-collapse"> <thead> <tr class="bg-gray-200"> <th class="border p-2">Name</th> <th class="border p-2">Type</th> <th class="border p-2">Status</th> <th class="border p-2">Actions</th> </tr> </thead> <tbody><tr key="{entity.id}"> <td class="border p-2">{entity.name}</td> <td class="border p-2">{entity.type}</td> <td class="border p-2">{entity.status}</td> <td class="border p-2"> <link href="{&#x60;/entities/${entity.id}&#x60;}"> <a class="text-blue-500 hover:underline">View</a> </td> </tr></tbody> </table> ); } EOF <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/lib/types.ts export interface Entity { id: string; type: string; name: string; attributes: Record&#x3C;string, any>; status: string; } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/lib/api.ts export async function fetchEntities(token: string) { const response = await fetch("/api/entities", { headers: { Authorization: <code>Bearer ${token}</code>, }, }); if (!response.ok) { throw new Error("Failed to fetch entities"); } return response.json(); }</p> <p>export async function createEntity(token: string, entity: any) { const response = await fetch("/api/entities", { method: "POST", headers: { Authorization: <code>Bearer ${token}</code>, "Content-Type": "application/json", }, body: JSON.stringify(entity), }); if (!response.ok) { throw new Error("Failed to create entity"); } return response.json(); } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/styles/globals.css @tailwind base; @tailwind components; @tailwind utilities; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/styles/tailwind.config.js module.exports = { content: ["./pages/<strong>/*.{ts,tsx}", "./components/</strong>/*.{ts,tsx}"], theme: { extend: {}, }, plugins: [], }; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/public/favicon.ico</p> <h1>Placeholder for favicon.ico</h1> <h1>TODO: Replace with actual favicon</h1> <p>EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/next.config.js module.exports = { env: { NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || "<a href="http://localhost:8000">http://localhost:8000</a>", API_URL: process.env.API_URL || "<a href="http://fastapi:8000">http://fastapi:8000</a>", }, }; EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/package.json { "name": "flexicmdb-frontend", "version": "1.0.0", "scripts": { "dev": "next dev", "build": "next build", "start": "next start", "test": "jest" }, "dependencies": { "next": "^12.2.5", "react": "^18.2.0", "react-dom": "^18.2.0", "next-auth": "^4.10.3", "tailwindcss": "^3.1.8", "axios": "^0.27.2" }, "devDependencies": { "@types/node": "^18.7.13", "@types/react": "^18.0.17", "typescript": "^4.8.2", "jest": "^28.1.3", "@testing-library/react": "^13.3.0", "autoprefixer": "^10.4.8", "postcss": "^8.4.16" } } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/tsconfig.json { "compilerOptions": { "target": "es5", "lib": ["dom", "dom.iterable", "esnext"], "allowJs": true, "skipLibCheck": true, "strict": true, "forceConsistentCasingInFileNames": true, "noEmit": true, "esModuleInterop": true, "module": "esnext", "moduleResolution": "node", "resolveJsonModule": true, "isolatedModules": true, "jsx": "preserve", "incremental": true }, "include": ["next-env.d.ts", "<strong>/*.ts", "</strong>/*.tsx"], "exclude": ["node_modules"] } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/vercel.json { "version": 2, "builds": [ { "src": "package.json", "use": "@vercel/next" } ], "routes": [ { "src": "/api/(.<em>)", "dest": "/api/$1" }, { "src": "/(.</em>)", "dest": "/" } ], "env": { "NODE_ENV": "production" }, "headers": [ { "source": "/(.*)", "headers": [ { "key": "X-Frame-Options", "value": "DENY" }, { "key": "X-Content-Type-Options", "value": "nosniff" } ] } ] } EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/.env.local.example NEXT_PUBLIC_API_URL=<a href="http://localhost:8000">http://localhost:8000</a> NEXTAUTH_URL=<a href="http://localhost:3000">http://localhost:3000</a> NEXTAUTH_SECRET=your-secret-key EOF</p> <p>cat &#x3C;&#x3C; 'EOF' > flexicmdb/frontend/tests/entities.test.tsx</p> <h1>Placeholder for frontend tests</h1> <h1>TODO: Implement tests for Entities page</h1> <p>EOF</p> <h1>Create empty <strong>init</strong>.py files</h1> <p>touch flexicmdb/backend/app/<strong>init</strong>.py touch flexicmdb/backend/app/models/<strong>init</strong>.py touch flexicmdb/backend/app/schemas/<strong>init</strong>.py touch flexicmdb/backend/app/routes/<strong>init</strong>.py touch flexicmdb/backend/app/dependencies/<strong>init</strong>.py touch flexicmdb/backend/app/services/<strong>init</strong>.py touch flexicmdb/backend/app/plugins/<strong>init</strong>.py touch flexicmdb/backend/tests/<strong>init</strong>.py</p> <h1>Create tarball</h1> <p>tar -czvf flexicmdb.tar.gz -C flexicmdb . echo "Tarball created: flexicmdb.tar.gz"</p> <h1>Clean up</h1> <p>rm -rf flexicmdb</p> <pre><code> ### Notes on the Script - **Completeness**: The script includes all key files from our previous discussions: - **Backend**: Full FastAPI app with entity, IPAM, partial ITIL (incidents, changes), and user management (RBAC, approvals). - **Frontend**: Next.js app with entity management (`/entities`, `/entities/[id]`), placeholders for ITIL/DDI, and basic components (`Navbar`, `EntityTable`). - **Root**: `README.md`, `.gitignore`, `.vscode/` for VSCode setup. - **Placeholders**: Some files (e.g., `routes/itil.py`, `pages/itil/changes.tsx`) are partial or placeholders to keep the tarball focused. You can expand these as needed. - **Authentication**: The backend uses a placeholder `get_current_user` (requires `fastapi-users` integration). The frontend uses NextAuth.js placeholders (requires FastAPI OAuth2 setup). - **Database Schema**: You’ll need to apply the schema manually (provided below) or add an `alembic/` directory for migrations. ### Database Schema To set up the PostgreSQL database, run the following SQL after creating the `flexicmdb` database: ```sql CREATE DATABASE flexicmdb; \c flexicmdb CREATE TABLE entities ( id UUID PRIMARY KEY, type VARCHAR NOT NULL, name VARCHAR NOT NULL, attributes JSONB DEFAULT '{}', status VARCHAR DEFAULT 'active' ); CREATE TABLE relationships ( id UUID PRIMARY KEY, source_id UUID REFERENCES entities(id), target_id UUID REFERENCES entities(id), type VARCHAR ); CREATE TABLE ip_addresses ( id UUID PRIMARY KEY, address VARCHAR NOT NULL UNIQUE, subnet VARCHAR NOT NULL, status VARCHAR DEFAULT 'allocated', entity_id UUID REFERENCES entities(id) ); CREATE TABLE incidents ( id UUID PRIMARY KEY, title VARCHAR NOT NULL, description TEXT, status VARCHAR DEFAULT 'open', priority VARCHAR DEFAULT 'low', entity_id UUID REFERENCES entities(id), assignee_id UUID REFERENCES users(id) ); CREATE TABLE changes ( id UUID PRIMARY KEY, title VARCHAR NOT NULL, description TEXT, status VARCHAR DEFAULT 'requested', risk_level VARCHAR DEFAULT 'low', entity_id UUID REFERENCES entities(id), requestor_id UUID REFERENCES users(id), approver_id UUID REFERENCES users(id), planned_start TIMESTAMP, planned_end TIMESTAMP ); CREATE TABLE users ( id UUID PRIMARY KEY, email VARCHAR NOT NULL UNIQUE, username VARCHAR NOT NULL UNIQUE, hashed_password VARCHAR NOT NULL, first_name VARCHAR, last_name VARCHAR, is_active BOOLEAN DEFAULT TRUE, attributes JSONB DEFAULT '{}' ); CREATE TABLE roles ( id UUID PRIMARY KEY, name VARCHAR NOT NULL UNIQUE, description TEXT, permissions JSONB NOT NULL ); CREATE TABLE user_roles ( user_id UUID REFERENCES users(id), role_id UUID REFERENCES roles(id), PRIMARY KEY (user_id, role_id) ); CREATE TABLE approvals ( id UUID PRIMARY KEY, change_id UUID REFERENCES changes(id), user_id UUID REFERENCES users(id), status VARCHAR NOT NULL, comments TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); CREATE TABLE audit_logs ( id UUID PRIMARY KEY, user_id UUID REFERENCES users(id), action VARCHAR NOT NULL, resource_type VARCHAR NOT NULL, resource_id UUID, details JSONB DEFAULT '{}', timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); </code></pre> <p>Save this as <code>schema.sql</code> in <code>flexicmdb/backend/</code> for reference.</p> <h3>Alternative Workarounds</h3> <p>If the script-based approach isn’t ideal (e.g., you want a pre-generated tarball), here are alternatives within my constraints:</p> <ol> <li><strong>GitHub Repository</strong>: <ul> <li>I can provide a detailed list of files and contents, and you can create a GitHub repository manually. Alternatively, I can guide you to create a repository and commit the files using GitHub’s web interface.</li> <li>Downside: Still requires manual file creation, though GitHub’s UI simplifies it.</li> </ul> </li> <li><strong>Pastebin or Gist</strong>: <ul> <li>I can upload the script or file contents to a Pastebin or GitHub Gist, and you can download/run it. However, this is similar to copying the script above.</li> <li>Example: Create a Gist with <code>create_tarball.sh</code> and share the link.</li> </ul> </li> <li><strong>Manual Tarball Creation</strong>: <ul> <li>If you have a specific environment (e.g., Linux, macOS), you can copy the script, run it, and share the resulting <code>flexicmdb.tar.gz</code> via a file-sharing service (e.g., Google Drive, Dropbox). I can’t host it myself, but I can guide you through the process.</li> </ul> </li> <li><strong>Request Clarification</strong>: <ul> <li>If you have access to a server or tool where I can indirectly generate the tarball (e.g., a CI/CD pipeline, a specific API), please clarify, and I’ll tailor the solution.</li> </ul> </li> </ol> <h3>Next Steps</h3> <p>The script above should meet your need for a single tarball by automating the creation process. Once you have <code>flexicmdb.tar.gz</code>, you can:</p> <ol> <li><strong>Extract and Develop</strong>: <ul> <li>Extract, open in VSCode, and start developing (e.g., add ITIL routes, frontend pages).</li> <li>Follow <code>README.md</code> for setup (backend: <code>pip install</code>, frontend: <code>npm install</code>).</li> </ul> </li> <li><strong>Deploy</strong>: <ul> <li>Deploy the frontend to Vercel (<code>vercel</code> command in <code>frontend/</code>).</li> <li>Deploy the backend via Docker or a hosting service (e.g., AWS, Heroku).</li> </ul> </li> <li><strong>Expand Features</strong>: <ul> <li>Implement additional ITIL endpoints (<code>routes/itil.py</code> for changes, problems).</li> <li>Add frontend pages (<code>pages/itil/changes.tsx</code>, <code>pages/ipam.tsx</code>).</li> <li>Configure authentication (NextAuth.js with FastAPI OAuth2).</li> </ul> </li> </ol> <p><strong>Questions</strong>:</p> <ul> <li>Does the script meet your needs, or do you want me to modify it (e.g., add more frontend pages, complete <code>routes/itil.py</code>)?</li> <li>Would you prefer a GitHub Gist with the script or file contents for easier access?</li> <li>If you have a specific way to receive a pre-generated tarball (e.g., via a server you control), please provide details.</li> <li>Do you want guidance on specific post-setup tasks (e.g., Vercel deployment, FastAPI hosting, authentication setup)?</li> </ul> <p>Please let me know how to proceed or if there’s a specific workaround you’d like to explore!</p></nextscript>
